{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "mozPipelineMetadata": {
    "bq_dataset_family": "firefox_installer",
    "bq_metadata_format": "structured",
    "bq_table": "install_v1",
    "expiration_policy": {
      "delete_after_days": 775
    },
    "sample_id_source_uuid_attribute": "document_id"
  },
  "properties": {
    "64bit_build": {
      "description": "True if the installed build is 64-bit",
      "type": "boolean"
    },
    "64bit_os": {
      "description": "True if the OS this installer ran on is 64-bit",
      "type": "boolean"
    },
    "admin_user": {
      "description": "True if the user account which ran the installer had administrative privileges",
      "type": "boolean"
    },
    "attribution": {
      "description": "Any attribution data that was included with the installer",
      "type": "string"
    },
    "build_channel": {
      "description": "Channel the installer was built with the branding for",
      "type": "string"
    },
    "build_id": {
      "description": "Build ID of the installed product. Absent for a failed stub installation.",
      "type": "string"
    },
    "bytes_downloaded": {
      "description": "Size of the full installer data that was actually transferred",
      "minimum": 0,
      "type": "integer"
    },
    "default_path": {
      "description": "True if the user did not customize the installation path",
      "type": "boolean"
    },
    "disk_space_error": {
      "description": "[DEPRECATED] Use `disk_space_req_not_met` instead.",
      "type": "boolean"
    },
    "disk_space_req_not_met": {
      "description": "True if the installation failed because the drive we're trying to install to does not have enough space.",
      "type": "boolean"
    },
    "distribution_id": {
      "description": "ID of partner distribution, defaulting to 0 for Mozilla distributions",
      "type": "string"
    },
    "distribution_version": {
      "description": "Version of partner distribution, defaulting to 0 for Mozilla distributions",
      "type": "string"
    },
    "download_ip": {
      "description": "IP address of the server the full installer was downloaded from. May be either IPv4 or IPv6.",
      "type": "string"
    },
    "download_latency": {
      "description": "Seconds between sending the full installer download request and receiving the first response data",
      "minimum": 0,
      "type": "integer"
    },
    "download_retries": {
      "description": "Number of times the full installer download was retried or resumed",
      "minimum": 0,
      "type": "integer"
    },
    "download_size": {
      "description": "Expected size of the full installer download according to the HTTP response",
      "minimum": 0,
      "type": "integer"
    },
    "download_time": {
      "description": "Seconds spent downloading the full installer",
      "minimum": 0,
      "type": "integer"
    },
    "file_error": {
      "description": "True if the installation failed because the downloaded file couldn’t be read from",
      "type": "boolean"
    },
    "finish_time": {
      "description": "For a stub ping, seconds spent waiting for the installed application to launch. For a full ping, seconds spent on the finish page.",
      "minimum": 0,
      "type": "integer"
    },
    "from_msi": {
      "description": "True if the install was launched from an MSI wrapper",
      "type": "boolean"
    },
    "funnelcake": {
      "description": "Funnelcake ID",
      "type": "string"
    },
    "had_old_install": {
      "description": "True if at least one existing installation of Firefox was found on the system prior to this installation",
      "type": "boolean"
    },
    "hardware_req_not_met": {
      "description": "True if the system hardware does not meet the minimum hardware requirements.",
      "type": "boolean"
    },
    "install_time": {
      "description": "For a stub ping, seconds the full installer ran for. For a full ping, seconds spent on the install progress page.",
      "minimum": 0,
      "type": "integer"
    },
    "install_timeout": {
      "description": "True if the installation failed because running the full installer timed out. Currently that means it ran for more than 150 seconds for a new installation, or 165 seconds for a paveover installation.",
      "type": "boolean"
    },
    "installer_type": {
      "description": "Which type of installer generated this ping (full or stub)",
      "type": "string"
    },
    "installer_version": {
      "description": "Version of the installer itself. May be different from the product version for a stub install.",
      "type": "string"
    },
    "intro_time": {
      "description": "Seconds spent on the intro screen",
      "minimum": 0,
      "type": "integer"
    },
    "locale": {
      "description": "Locale of the installer and the installed product, in AB_CD format",
      "type": "string"
    },
    "manual_download": {
      "description": "True if the user clicked through the error message to the manual full installer download page.",
      "type": "boolean"
    },
    "new_default": {
      "description": "True if the new installation was successfully set as the default browser",
      "type": "boolean"
    },
    "new_launched": {
      "description": "True if the installation succeeded and we were able to launch the newly installed application.",
      "type": "boolean"
    },
    "no_write_access": {
      "description": "[DEPRECATED] Use `writeable_req_not_met` instead.",
      "type": "boolean"
    },
    "old_build_id": {
      "description": "Build ID of the previously installed Firefox, if any",
      "type": "string"
    },
    "old_default": {
      "description": "True if an existing Firefox installation was already set as the default browser",
      "type": "boolean"
    },
    "old_running": {
      "description": "[DEPRECATED] Should always be false since Firefox 74, since this check was removed in that version.",
      "type": "boolean"
    },
    "old_version": {
      "description": "Version of the previously installed Firefox, if any",
      "type": "string"
    },
    "options_time": {
      "description": "Seconds spent in the options screens. For the stub installer this includes only the profile cleanup prompt.",
      "minimum": 0,
      "type": "integer"
    },
    "os_version": {
      "description": "Windows version number in major.minor.build format",
      "type": "string"
    },
    "os_version_req_not_met": {
      "description": " True if the system does not meet the minimum OS version requirements.",
      "type": "boolean"
    },
    "out_of_retries": {
      "description": "True if the installation failed because the download had to be retried too many times (currently 10)",
      "type": "boolean"
    },
    "ping_version": {
      "description": "Only set for stub installer pings",
      "type": "string"
    },
    "preinstall_time": {
      "description": "Seconds spent verifying the downloaded full installer and preparing to run it",
      "minimum": 0,
      "type": "integer"
    },
    "profile_cleanup_prompt": {
      "description": "Which type of profile cleanup prompt was shown, (reinstall or paveover)",
      "type": "string"
    },
    "profile_cleanup_requested": {
      "description": "True if either profile cleanup prompt was shown and the user accepted the prompt",
      "type": "boolean"
    },
    "server_os": {
      "description": "True if the OS this installer ran on is Windows Server",
      "type": "boolean"
    },
    "service_pack": {
      "description": "Latest installed service pack number",
      "type": "string"
    },
    "set_default": {
      "description": "True if the option to set the new installation as the default browser was selected",
      "type": "boolean"
    },
    "sig_check_timeout": {
      "description": "True if there was a timeout on the the certificate checks",
      "type": "boolean"
    },
    "sig_not_trusted": {
      "description": "True if the installation failed because the signature on the downloaded file wasn’t valid and/or wasn’t signed by a trusted authority",
      "type": "boolean"
    },
    "sig_unexpected": {
      "description": "True if the installation failed because the signature on the downloaded file didn’t have the expected subject and issuer names",
      "type": "boolean"
    },
    "silent": {
      "description": "True if the installer was run in silent mode (either from an MSI or with command-line parameters)",
      "type": "boolean"
    },
    "stub_build_id": {
      "description": "Build ID of the stub installer",
      "type": "string"
    },
    "succeeded": {
      "description": "True if a new installation was successfully created. If false, check the error status fields for the failure reason.",
      "type": "boolean"
    },
    "unknown_error": {
      "description": "Default failure exit code. Seeing this in telemetry indicates that the stub installer has exited unsuccessfully, but no reason has been specified",
      "type": "boolean"
    },
    "update_channel": {
      "description": "Value of MOZ_UPDATE_CHANNEL the installer was built with. Generally the same as build_channel",
      "type": "string"
    },
    "user_cancelled": {
      "description": "True if the installation failed because the user cancelled it or closed the window",
      "type": "boolean"
    },
    "version": {
      "description": "Version of the installed product. May be different from installer_version for a stub install. Absent for a failed stub installation.",
      "type": "string"
    },
    "windows_ubr": {
      "description": "The Windows Update Build Revision of the installation device, 0 if it does not exist",
      "type": "integer"
    },
    "writeable_req_not_met": {
      "description": "True if the installation failed because the user doesn't have permission to write to the path we're trying to install to.",
      "type": "boolean"
    }
  },
  "required": [
    "installer_type",
    "installer_version",
    "build_channel"
  ],
  "title": "install",
  "type": "object"
}
